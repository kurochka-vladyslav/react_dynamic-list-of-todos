{"version":3,"sources":["components/TodoList/TodoList.tsx","components/api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setSelectedUserId","selectedUserId","useState","query","setQuery","statusOfTodo","setStatusOfTodo","preparedTodos","todosFilteredByTitle","filter","title","toLowerCase","includes","completed","preparingTodos","className","type","value","onChange","event","target","map","todo","classNames","checked","readOnly","userId","onClick","id","getData","url","a","fetch","responce","json","CurrentUser","clear","user","setUser","useEffect","getUser","then","newUser","name","email","phone","App","setTodos","getTodosFromServer","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5067a3e3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  setSelectedUserId: (id: number) => void;\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedUserId,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [statusOfTodo, setStatusOfTodo] = useState('all');\n\n  const preparingTodos = () => {\n    const todosFilteredByTitle = todos.filter(({ title }) => {\n      return title.toLowerCase().includes(query.toLowerCase());\n    });\n\n    switch (statusOfTodo) {\n      case 'active':\n        return todosFilteredByTitle.filter(\n          ({ completed }) => !completed,\n        );\n\n      case 'completed':\n        return todosFilteredByTitle.filter(\n          ({ completed }) => completed,\n        );\n\n      default:\n        return todosFilteredByTitle;\n    }\n  };\n\n  const preparedTodos = preparingTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__input\">\n        <h3>Select todo title</h3>\n        <label>\n          <input\n            className=\"TodoList__input--title\"\n            type=\"text\"\n            value={query}\n            onChange={(event) => setQuery(event.target.value)}\n            data-cy=\"filterByTitle\"\n          />\n        </label>\n      </div>\n      <div className=\"TodoList__select\">\n        <h3>\n          Select todo status:\n        </h3>\n        <select\n          value={statusOfTodo}\n          onChange={event => setStatusOfTodo(event.target.value)}\n          className=\"TodoList__select--selector\"\n        >\n          <option>all</option>\n          <option>active</option>\n          <option>completed</option>\n        </select>\n      </div>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {preparedTodos.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n              {todo.userId && (\n                <button\n                  className={classNames(\n                    'button',\n                    'TodoList__user-button',\n                    {\n                      'TodoList__user-button--selected':\n                        selectedUserId === todo.userId,\n                    },\n                  )}\n                  type=\"button\"\n                  data-cy=\"userButton\"\n                  value={todo.userId}\n                  onClick={() => setSelectedUserId(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","export const API_URL = 'https://mate.academy/students-api';\n\nexport const getData = async (url: string) => {\n  const responce = await fetch(`${API_URL}/${url}`);\n\n  return responce.json();\n};\n\nexport const getTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number) => getData(`users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../api/api';\n\ntype Props = {\n  userId: number;\n  clear: (id: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clear }) => {\n  const [user, setUser] = useState<null | User>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(newUser => setUser(newUser));\n  }, [userId]);\n\n  return (\n    <>\n      {user && (\n        <>\n          <div className=\"CurrentUser\">\n\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n\n            <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={() => clear(0)}\n          >\n            Clear User\n          </button>\n        </>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api/api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const getTodosFromServer = async () => {\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const chooseUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  const clear = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setSelectedUserId={chooseUser}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} clear={clear} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}